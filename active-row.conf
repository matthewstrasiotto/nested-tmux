###############################################################################
# matthew's unprefixed commands
# 

run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
           sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

run-shell 'export TMUX_VERSION="$(tmux -V | \
           sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")"'
TMUX_VERSION='#(tmux -V | \
           sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

TEST_CMD='[ "$(echo "$TMUX_VERSION >= 3.3" | bc)" = 1 ]'

# Allow sharing keybindings with Vim for navigating splits
set -g @plugin 'mstr3336/vim-tmux-navigator'


## Quick Navigation #############

# Switch panes 
# Usage: "ALT+arrow keys" (without prefix key)
# from https://gist.github.com/spicycode
#bind -n C-Left select-pane -L
#bind -n C-Right select-pane -R
#bind -n C-Up select-pane -U
#bind -n C-Down select-pane -D

# Switch windows
# usage: "SHIFT+arrow" (without prefix key)
bind -n S-Left  previous-window
bind -n S-Right next-window

if-shell "$TEST_CMD" {
bind -n -N "Change to prev window" S-Left
bind -n -N "Change to next window" S-Right
}


###############################################################################

#
# Colors
#
active_window_bg=colour34
inactive_window_bg=colour102
bar_bg=colour237
bar_fg=colour255


#
# Configure prefix
#
# unbind C-b
set -g prefix C-a

#
# Prefixed commands
#

# Create a new window (Ctrl + A, Ctrl + c)
# bind C-c new-window

# Create a new nested tmux (Ctrl + A, Ctrl + s)
bind C-s new-window ~/.tmux/nested/new-tmux \; \
         rename-window '' \; \
         command-prompt -I "#W" "rename-window -- '%%'"

if-shell "$TEST_CMD" {
bind  -N "Create a new nested tmux" C-s
}


# Switch to last window (Ctrl + A, Ctrl + A)
# bind C-a last-window

# Rename current window (Ctrl + A, A)
# bind A  rename-window '' \; \
        # command-prompt -I "#W" "rename-window -- '%%'"

# Enable search mode
# bind -T copy-mode -n / command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""

#
# Non-prefixed commands
#

# Go to next window (Alt + Right)
# bind -n M-right next
#
# Go to previous window (Alt + Left)
# bind -n M-left  prev

# Create new window (Ctrl + t)
# bind -n C-t new-window

# Switch to inner tmux (Alt + Up)
bind -n M-up send-keys M-F12

# Switch to outer tmux (Alt + Down)
bind -n M-down source-file ~/.tmux/nested/inactive-row.conf \; \
               run-shell 'tmux -L $TMUX_PARENT source-file ~/.tmux/nested/active-row.conf' \; \
               run-shell 'tmux -L $TMUX_PARENT set -g window-status-current-style bg=$active_window_bg'

# Handler for becoming active (Alt + F12, don't use directly)
bind -n M-F12 run-shell 'tmux -L $TMUX_PARENT source-file ~/.tmux/nested/inactive-row.conf' \; \
              source-file ~/.tmux/nested/active-row.conf \; \
              set -g window-status-current-style bg=$active_window_bg


if-shell "$TEST_CMD" {
bind -n -N "Become active session [INTERNAL USE - Dont Call Directly]" M-F12
bind -n -N "Switch to inner tmux" M-up
bind -n -N "Switch to outer tmux" M-down
}

# Handler for closed window: enable outer terminal
set-hook -g client-detached "run-shell 'tmux -L $TMUX_PARENT source-file ~/.tmux/nested/active-row.conf && tmux -L $TMUX_PARENT set -g window-status-current-style bg=$active_window_bg'"

#
# Appearance
#
set -g status-style bg=$bar_bg
setw -g window-status-style fg=$bar_fg
setw -g window-status-current-format ' #I #W '
setw -g window-status-format ' #I #W '
setw -g window-status-current-style bg=$active_window_bg

# If we're the root tmux, unbind M-down
if-shell 'test -z "$TMUX_PARENT"' 'bind -n M-down send-keys ""' ''

# When a new session is created unbind the parent
if-shell 'test -z "$TMUX_PARENT"' '' 'run-shell "tmux -L $TMUX_PARENT source-file ~/.tmux/nested/inactive-row.conf"'
